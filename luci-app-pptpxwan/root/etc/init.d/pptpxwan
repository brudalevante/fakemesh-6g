#!/bin/sh /etc/rc.common

START=18

global_setup() {
	local mppe=$(uci get pptpxwan.pptp.mppe 2>/dev/null || echo 0)
	if [ "x$mppe" = "x0" ]; then
		grep -q ^mppe /etc/ppp/options.pptp && {
			sed -i 's/\(^mppe.*\)/#\1/' /etc/ppp/options.pptp
		}
	else
		grep -q ^mppe /etc/ppp/options.pptp || {
			if grep -q "^#mppe" /etc/ppp/options.pptp; then
				sed -i 's/^#\(mppe.*\)/\1/' /etc/ppp/options.pptp
			else
				echo "mppe required,no40,no56,stateless" >>/etc/ppp/options.pptp
			fi
		}
	fi
}

# <delay_time> <line_cnt>
delay_start_pptpxwan() {
	local delay_time=$1
	local line_cnt=$2
	local line_idx idx

	touch /var/run/mwan3.init

	logger -t pptpxwan "stop all($line_cnt) pptpxwan network first.."
	line_idx=0
	while test $line_idx -lt $line_cnt; do
		touch /var/run/mwan3.init
		idx=$(printf %03u $line_idx)
		ubus call network.interface.xwan$idx down
		line_idx=$((line_idx+1))
	done

	logger -t pptpxwan "start mwan3.."

	logger -t pptpxwan "start all($line_cnt) pptpxwan network one by one.."
	line_idx=0
	while test $line_idx -lt $line_cnt; do
		touch /var/run/mwan3.init
		idx=$(printf %03u $line_idx)
		logger -t pptpxwan "starting network.xwan$idx..."
		ubus call network.interface.xwan$idx up
		line_idx=$((line_idx+1))
		sleep $delay_time
	done

	rm /var/run/mwan3.init
	/etc/init.d/mwan3 reload
}

delay_reload_boot() {
	local line_idx=0
	local delay_reload=$(uci get pptpxwan.pptp.delay_reload 2>/dev/null || echo 0)

	if test "${delay_reload}" -eq 0; then
		return
	fi

	#wait max 5 minutes for network ready
	for i in `seq 1 60`; do
		if ip r | grep -q ^default; then
			/etc/init.d/firewall status >/dev/null 2>&1 && \
			/etc/init.d/network status >/dev/null 2>&1 && \
			/etc/init.d/mwan3 status >/dev/null 2>&1 && break
		fi
		sleep 5
	done

	cache_count_line() {
		line_idx=$((line_idx+1))
	}
	config_load pptpxwan
	config_foreach cache_count_line line

	delay_start_pptpxwan "$delay_reload" "$line_idx"
}

boot() {
	XBOOT=1 #do nothing
	global_setup
	test -f /etc/pptpxwan || {
		touch /etc/pptpxwan
		XRELOAD=0 start
	}

	local enable=$(uci get pptpxwan.pptp.enable 2>/dev/null || echo 0)

	if [ "$enable" = "1" ]; then
		delay_reload_boot 1000>&- &
	fi
}

cache_mwan3_add_one() {
	local intf=$1
	local src_net="$2"
	local dst_net="$3"
	local track_ips=$(uci get pptpxwan.pptp.track_ip 2>/dev/null)

	uci delete mwan3.${intf} 2>/dev/null
	uci set mwan3.${intf}=interface
	uci set mwan3.${intf}.enabled='1'
	uci set mwan3.${intf}.initial_state='online'
	uci set mwan3.${intf}.family='ipv4'
	uci set mwan3.${intf}.track_method='ping'
	uci set mwan3.${intf}.reliability='1'
	uci set mwan3.${intf}.count='1'
	uci set mwan3.${intf}.size='56'
	uci set mwan3.${intf}.max_ttl='60'
	uci set mwan3.${intf}.check_quality='0'
	uci set mwan3.${intf}.timeout='2'
	uci set mwan3.${intf}.interval='20'
	uci set mwan3.${intf}.failure_interval='5'
	uci set mwan3.${intf}.recovery_interval='5'
	uci set mwan3.${intf}.down='3'
	uci set mwan3.${intf}.up='3'
	uci delete mwan3.${intf}.track_ip 2>/dev/null
	for track_ip in $track_ips; do
		uci add_list mwan3.${intf}.track_ip="${track_ip}"
	done

	uci set mwan3.${intf}_m100_w100=member
	uci set mwan3.${intf}_m100_w100.interface="${intf}"
	uci set mwan3.${intf}_m100_w100.metric='100'
	uci set mwan3.${intf}_m100_w100.weight='100'

	uci set mwan3.${intf}_only=policy
	uci set mwan3.${intf}_only.last_resort='unreachable'
	uci delete mwan3.${intf}_only.use_member 2>/dev/null
	uci add_list mwan3.${intf}_only.use_member="${intf}_m100_w100"

	uci set mwan3.line_${intf}=rule
	uci set mwan3.line_${intf}.family='ipv4'
	uci set mwan3.line_${intf}.src_ip="${src_net}"
	test -n "${dst_net}" && \
	uci set mwan3.line_${intf}.dest_ip="${dst_net}"
	uci set mwan3.line_${intf}.proto='all'
	uci set mwan3.line_${intf}.sticky='0'
	uci set mwan3.line_${intf}.use_policy="${intf}_only"
}

cache_add_to_zone_wan() {
	local idx=0

	while uci get firewall.@zone[$idx] >/dev/null 2>&1; do
		if [ "$(uci get firewall.@zone[$idx].name)" = "wan" ]; then
			networks=`uci get firewall.@zone[$idx].network`;
			for nw in $networks; do
				[ "$nw" = "$1" ] && return
			done
			uci set firewall.@zone[$idx].network="`echo $networks $1`"
			return
		fi
		idx=$((idx + 1))
	done
}

cache_add_pptpxwan_line() {
	local cfg="$1"
	local src_net dst_net pptp_user pptp_pass pptp_server
	local change=0
	local mtu=$(uci get pptpxwan.pptp.mtu 2>/dev/null || echo 0)

	config_get src_net "$cfg" src_net
	config_get dst_net "$cfg" dst_net
	config_get pptp_user "$cfg" username
	config_get pptp_pass "$cfg" password
	config_get pptp_server "$cfg" pptp_server

	src_net=$(lua /usr/lib/lua/ipops.lua netStrings2ipcidrStrings "$src_net")
	dst_net=$(lua /usr/lib/lua/ipops.lua netStrings2ipcidrStrings "$dst_net")

	local idx=$(printf %03u $line_idx)
	#add network
	uci delete network.xwan$idx 2>/dev/null
	uci set network.xwan$idx=interface
	uci set network.xwan$idx.proto='pptp'
	uci set network.xwan$idx.server="$pptp_server"
	uci set network.xwan$idx.username="$pptp_user"
	uci set network.xwan$idx.password="$pptp_pass"
	uci set network.xwan$idx.metric="$((900+line_idx))"
	uci set network.xwan$idx.auto='1'
	uci set network.xwan$idx.ipv6='0'
	uci set network.xwan$idx.keepalive='5 10'
	[ "$mtu" = "0" ] || uci set network.xwan$idx.mtu="$mtu"

	cache_add_to_zone_wan xwan$idx
	cache_mwan3_add_one xwan$idx "$src_net" "$dst_net"

	line_idx=$((line_idx+1))
}

start() {
	local id idx
	local line_idx=0
	local enable=$(uci get pptpxwan.pptp.enable 2>/dev/null || echo 0)

	[ "x$enable" = "x1" ] || return 0

	global_setup

	while uci delete mwan3.@interface[0] >/dev/null 2>&1; do :; done
	while uci delete mwan3.@member[0] >/dev/null 2>&1; do :; done
	while uci delete mwan3.@policy[0] >/dev/null 2>&1; do :; done
	while uci delete mwan3.@rule[0] >/dev/null 2>&1; do :; done

	uci delete firewall.pptpxwan_gre >/dev/null 2>&1

	if [ "$enable" = "1" ]; then

	config_load pptpxwan
	config_foreach cache_add_pptpxwan_line line

	uci delete firewall.pptpxwan_gre 2>/dev/null
	uci set firewall.pptpxwan_gre=rule
	uci set firewall.pptpxwan_gre.enabled='1'
	uci set firewall.pptpxwan_gre.target='ACCEPT'
	uci set firewall.pptpxwan_gre.src='wan'
	uci set firewall.pptpxwan_gre.name='gre'
	uci set firewall.pptpxwan_gre.proto='gre'

	fi # if enable

	#clean up network
	id=$line_idx
	idx=$(printf %03u $id)
	while :; do
		uci get network.device$idx >/dev/null 2>&1 && {
			uci delete network.device$idx
			change=1
		}
		uci get network.xwan$idx >/dev/null 2>&1 && {
			uci delete network.xwan$idx
			change=1
		}
		id=$((id + 1))
		idx=$(printf %03u $id)
		uci get network.device$idx >/dev/null 2>&1 || uci get network.xwan$idx >/dev/null 2>&1 || break
	done

	#clean up firewall
	id=$line_idx
	idx=0
	while uci get firewall.@zone[$idx] >/dev/null 2>&1; do
		if [ "$(uci get firewall.@zone[$idx].name)" = "wan" ]; then
			networks=`uci get firewall.@zone[$idx].network`;
			uci delete firewall.@zone[$idx].network >/dev/null 2>&1
			for nw in $networks; do
				num=${nw:4}
				[ "${nw:0:4}" = "xwan" ] && [ ${#num} = 3 ] && [ $num -ge $id ] && continue
				uci add_list firewall.@zone[$idx].network="$nw"
			done
			break
		fi
		idx=$((idx + 1))
	done

	uci commit firewall
	uci commit mwan3
	uci commit network

	[ "x$XRELOAD" = "x1" ] && {
		/etc/init.d/network reload
		/etc/init.d/firewall reload
		/etc/init.d/mwan3 reload
		delay_reload=$(uci get pptpxwan.pptp.delay_reload 2>/dev/null || echo 0)
		if test "${delay_reload}" -gt 0 && [ "$enable" = "1" ]; then
			delay_start_pptpxwan "${delay_reload}" $line_idx
		fi
	}
}

restart() {
	XRELOAD=1 start
}
